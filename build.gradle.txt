buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://plugins.gradle.org/m2/" }

    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'java'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

sourceCompatibility = 1.8

static def platformOf(project) {
    if (project.name.endsWith("-android")) return "android"
    if (project.name.endsWith("-common")) return "common"
    if (project.name.endsWith("-js")) return "js"
    if (project.name.endsWith("-jfx")) return "jfx"
    if (project.name.endsWith("-jvm")) return "jvm"
    return "example"
}


subprojects {
    repositories {
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'


    def varintName = ""
    varintName = "${project.name}"

    afterEvaluate {
        task sourceJar(type: Jar, dependsOn: classes) {
            classifier 'sources'
            from sourceSets.main.kotlin
            if (project.name.endsWith("jvm") || project.name.endsWith("js")) {
                duplicatesStrategy = "exclude"
                def platformSrc = sourceSets.main.kotlin
                def commonSrc = project(':geojson-common').sourceSets.main.kotlin
                from(platformSrc + commonSrc)
            }
        }
    }

    tasks.withType(Jar) {
        archivesBaseName = varintName
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "Data2viz"
                name "Data2viz team"
                organization "Data2viz"
                organizationUrl "https://data2viz.io"
            }
        }

        scm {
            url "https://github.com/data2viz/geojson-kotlin"
        }
    }

    publishing {
        publications {
            mavenProject(MavenPublication) {
                from components.java
                groupId project.group
                artifactId varintName
                version project.version

                if (project.name.endsWith("jvm"))
                    artifact javadocJar

                artifact sourceJar {
                    classifier "sources"
                }

                def platform = platformOf(project)
                def description = project.description
                if (description == null) {
                    description = "$platform lib of ${project.name}"
                }


                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', project.name)
                    root.appendNode('description', description)
                    root.appendNode('url', 'https://github.com/data2viz/geojson-kotlin')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    if (project.hasProperty("bintray.user")) {
        bintray {
            user = project.property('bintray.user')
            key = project.property('bintray.key')
            publications = ['mavenProject']
            configurations = ['archives']

            pkg {
                repo = 'geojson-kotlin'
                name = 'geojson-kotlin'
                userOrg = 'data2viz'
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/data2viz/geojson-kotlin.git'
                version {
                    name = "${project.version}"
//                desc = "data2viz-${project.name}"
//                released  = new Date()
                    vcsTag = "v${project.version}"
                }
            }
        }

    }

}
