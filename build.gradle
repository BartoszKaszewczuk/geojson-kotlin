buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://plugins.gradle.org/m2/" }

    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'java'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'

sourceCompatibility = 1.8

subprojects {
    repositories {
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'


    if (project.name.contains('-common')) {
        apply plugin: 'kotlin-platform-common'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        }
    }
    if (project.name.contains('-js')) {
        apply plugin: 'kotlin-platform-js'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
        }
        compileKotlin2Js {
            kotlinOptions {
                metaInfo = true
                sourceMap = true
                sourceMapEmbedSources = "always"
                moduleKind = 'umd'
                main = "call"
            }
        }
        compileTestKotlin2Js { kotlinOptions.moduleKind = 'umd' }
    }
    if (project.name.contains('-jvm')) {
        apply plugin: 'kotlin-platform-jvm'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile 'junit:junit:4.12'
        }

        //for tornadoFx
        compileKotlin     { kotlinOptions.jvmTarget = 1.8 }
        compileTestKotlin { kotlinOptions.jvmTarget = 1.8 }

        apply plugin: 'org.jetbrains.dokka'

        tasks.withType(dokka.getClass()) {
            jdkVersion = 8
            includes = ['README.md']
        }

        dokka {
            outputFormat = 'kotlin-website'
        }

// real xxx-javadoc.jar for JVM
        task dokkaJavadoc(type: dokka.getClass()) {
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/javadoc"
        }

        task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
            classifier = 'javadoc'
            from "$buildDir/javadoc"
        }

    }

    def varintName = ""
    varintName = "${project.name}"

    afterEvaluate {
        task sourceJar(type: Jar, dependsOn: classes) {
            classifier 'sources'
            from sourceSets.main.kotlin
            if (project.name.endsWith("jvm") || project.name.endsWith("js")) {
                duplicatesStrategy = "exclude"
                def platformSrc = sourceSets.main.kotlin
                def commonSrc = project(':geojson-common').sourceSets.main.kotlin
                from(platformSrc + commonSrc)
            }
        }
    }

    tasks.withType(Jar) {
        archivesBaseName = varintName
    }

    publishing {
        publications {
            mavenProject(MavenPublication) {
                from components.java
                groupId project.group
                artifactId varintName
                version project.version

                if(project.name.endsWith("jvm"))
                    artifact javadocJar

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    if (project.hasProperty("bintray.user")) {
        bintray {
            user = project.property('bintray.user')
            key = project.property('bintray.key')
            publications = ['mavenProject']
            configurations = ['archives']

            pkg {
                repo = 'geojson-kotlin'
                name = 'geojson-kotlin'
                userOrg = 'data2viz'
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/data2viz/geojson-kotlin.git'
                version {
                    name = "${project.version}"
//                desc = "data2viz-${project.name}"
//                released  = new Date()
                    vcsTag = "v${project.version}"
                }
            }
        }

    }

   
}
